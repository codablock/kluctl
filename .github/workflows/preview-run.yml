name: preview-run

on:
  pull_request:
    types: [labeled, synchronize]
    branches:
      - main
  push:
    branches:
      - main

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  ipfs-init:
    # only run on preview-branches and on PRs with the preview label
    if: ${{ github.event.label.name == 'preview' || contains(github.event.pull_request.labels.*.name, 'preview') }}
    runs-on: ubuntu-latest
    steps:
      - name: test
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | base64
      - name: test2
        run: |
          echo asd
          sleep 10000
      - name: Install ipfs
        run: |
          wget -q https://dist.ipfs.tech/kubo/v0.20.0/kubo_v0.20.0_linux-amd64.tar.gz
          tar -xvzf kubo_v0.20.0_linux-amd64.tar.gz
          ./kubo/install.sh
      - name: ipfs init
        run: |
          ipfs init
          ipfs config --json Experimental.Libp2pStreamMounting true
      - name: compress and encrypt ipfs folder
        run: |
          tar czf ipfs.tar.gz ~/.ipfs
          gpg --batch --passphrase $(echo $GITHUB_TOKEN | base64) -c ipfs.tar.gz
      - name: gather additional info
        run: |
          ipfs id -f "<id>" > ./ipfs_id
          echo "${{ github.event.number }}" > ./pr_number
          cat pr_number
      - uses: actions/upload-artifact@v3
        with:
          name: ipfs-config
          path: ipfs.tar.gz.gpg
      - uses: actions/upload-artifact@v3
        with:
          name: ipfs-id
          path: |
            ipfs_id
            pr_number

  preview-run:
    if: ${{ github.event.label.name == 'preview' || contains(github.event.pull_request.labels.*.name, 'preview') }}
    runs-on: ubuntu-latest
    needs: ipfs-init
    steps:
      # DOWNLOAD IPFS CONFIG
      - name: Download ipfs-config
        uses: actions/download-artifact@v3
        with:
          name: ipfs-config
      - name: Decrypt and extract ipfs-config
        run: |
          gpg --batch --passphrase $(echo $GITHUB_TOKEN | base64) -d ipfs.tar.gz.gpg > ipfs.tar.gz
          tar xzf ipfs.tar.gz
          mv home/runner/.ipfs ~/
      # SETUP IPFS
      - name: Install ipfs
        run: |
          wget -q https://dist.ipfs.tech/kubo/v0.20.0/kubo_v0.20.0_linux-amd64.tar.gz
          tar -xvzf kubo_v0.20.0_linux-amd64.tar.gz
          ./kubo/install.sh
      - name: Setup ipfs
        run: |
          ipfs daemon &
          sleep 5
      - name: Setup ssh
        run: |
          mkdir -p ~/.ssh
          echo ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCtWJls6XlpszR5zMjiK7cdUnSBI/p7tWaEHykJZrlwHRepNIckPk4ftOsOfiLb+2K/TntPGa0NMWM0uccRNXJ1/hgT5uiA8MpR8d1SGV5QtVwzJkDTXN8iwcTu1zcIUoL2FvQUm/P4hHI4BdcS9GyokOnqh296RRtajnzWZlGtBHRMPt9S7eil9kl5sOuHQIsZHjYkqLb7PSyVWeeMzEEeI28L2ZDrfBBgBNiE4ibVBlRbUeArRO5coV2Vn9uafzOIXT13apo0bhacv5FEmmsEcDGelZWKVInoUQHDnsr7UQPDHS2OsdtZRCluvRYH5ZC4SvrDeuZe4AKjc8iDeNuZLlzn7cgwGZDNHJ1PwAWwEz4/yF0vshA7mfrXLhjJ4+vN4enlQqDYqvudJ3x4uKO67panc+Gmaq76mxh81bJHNnlothEs9K9WfGcXAlBBjuk/0kmIf6I1ICA/dxCKa0sAMbolZHoBuoVUszQdlVrDkwPmzNCenBX/MPDJl08FJFc= ablock@Alexanders-MacBook-Pro.local >> ~/.ssh/authorized_keys
          sudo systemctl enable ssh
          sudo systemctl start ssh
          ipfs p2p listen /x/ssh /ip4/127.0.0.1/tcp/22
      # SETUP KIND
      - name: Setup Kind cluster
        run: |
          cat <<EOF > kind-config.yaml
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          networking:
            apiServerAddress: "127.0.0.1"
            apiServerPort: 6443
          nodes:
            - role: control-plane
              kubeadmConfigPatches:
                - |
                  kind: InitConfiguration
                  nodeRegistration:
                    kubeletExtraArgs:
                      node-labels: "ingress-ready=true"
              extraPortMappings:
                - containerPort: 80
                  hostPort: 80
                  protocol: TCP
                - containerPort: 443
                  hostPort: 443
                  protocol: TCP
          EOF
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          kind create cluster --config kind-config.yaml
      - name: Kind info
        run: |
          kubectl cluster-info
      # BUILD
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-preview-build-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-preview-build-
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.19
      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Build binary
        run: |
          go build -o bin/kluctl cmd/main.go
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          load: true
          tags: kluctl:preview
      # LOAD IMAGE
      - name: Load image to Kind
        run: |
          kind load docker-image kluctl:preview
      # INSTALL
      - name: Install Kluctl Controller
        run: |
          cd install/controller
          ../../bin/kluctl deploy --yes -a kluctl_image=kluctl -a kluctl_version=preview
      - name: Install Kluctl Webui
        run: |
          cd install/webui
          ../../bin/kluctl deploy --yes -a kluctl_image=kluctl -a kluctl_version=preview
      - name: Run kubectl port-forward
        run: |
          kubectl -n kluctl-system port-forward svc/kluctl-webui 9090:8080 &
      - name: Listen ipfs/p2p
        run: |
          ipfs p2p listen /x/k /ip4/127.0.0.1/tcp/6443
          ipfs p2p listen /x/kluctl-webui /ip4/127.0.0.1/tcp/9090
      - name: Sleep
        run: |
          sleep 1800
